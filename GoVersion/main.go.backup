package main

import (
	//"log"
	"time"
	//"bytes"
	//"net/http"
	//_ "net/http/pprof"
	bcrypt "golang.org/x/crypto/bcrypt"
	//auth "github.com/abbot/go-http-auth"
	//mjpeg "github.com/hybridgroup/mjpeg"
	mjpeg "github.com/0187773933/RaspiMotionAlarm/v2/mjpeg"
	motion "github.com/0187773933/RaspiMotionAlarm/v2"
	fiber "github.com/gofiber/fiber/v2"
)

// Switch to Fiber
// https://docs.gofiber.io/api/middleware/basicauth
// https://docs.gofiber.io/api/middleware#helmet
// https://docs.gofiber.io/api/app#handler

var stream *mjpeg.Stream

// func Secret( user , realm string ) string {
// 	if user == "john" {
// 		// password is "hello"
// 		return "$1$dlPL2MqE$oQmn16q49SqdmhenQuNgs1"
// 	}
// 	return ""
// }

// https://github.com/abbot/go-http-auth/issues/56#issuecomment-393651189
// https://pkg.go.dev/golang.org/x/crypto/bcrypt#GenerateFromPassword
func Secret( user , realm string ) string {
	if user == "admin" {
		hashedPassword , err := bcrypt.GenerateFromPassword( []byte( "waduwaduwadu" ) , bcrypt.DefaultCost )
		if err == nil {
			return string( hashedPassword )
		}
	}
	return ""
}

// https://golang.org/pkg/net/http/#ServeMux.HandleFunc
// https://github.com/abbot/go-http-auth/blob/7f557639efd97bd84723b69471931553e1e0ade9/basic.go#L134
// https://github.com/hybridgroup/mjpeg/blob/master/stream.go#L18
// https://golang.org/pkg/net/http/#ResponseWriter
func handle( c *fiber.Ctx ) error {
	c.Request().Header.Add( "Content-Type" , "multipart/x-mixed-replace;boundary=MJPEGBOUNDARY" )
	stream_channel := make( chan []byte )
	stream.Lock.Lock()
	stream.M[ stream_channel ] = true
	stream.Lock.Unlock()
	for {
		time.Sleep( stream.FrameInterval )
		b := <-stream_channel
		// _, err := w.Write( b )
		// if err != nil {
		// 	break
		// }
		// https://pkg.go.dev/github.com/gofiber/fiber/v2#Ctx.Write
		// So what if this same "handle" function was our fiber route handler , and instead of the http.ResponseWriter , we use fiber.Ctx.Write()
		// https://github.com/gofiber/fiber/blob/v2.3.2/ctx.go#L1011
		_ , err := c.Write( b )
		if err != nil {
			break
		}
		// I think we have to use https://pkg.go.dev/github.com/gofiber/fiber/v2#Ctx.SendStream
		// which means we have to convert existing mjpeg stream into an io.Reader ???
		// https://medium.com/learning-the-go-programming-language/streaming-io-in-go-d93507931185
		//c.SendStream( bytes.NewReader( b ) )
	}
	stream.Lock.Lock()
	delete( stream.M , stream_channel )
	stream.Lock.Unlock()
	//log.Println( "Stream:" , r.RemoteAddr , "disconnected" )
	return c.SendString( "wadu" )
}

func main() {
	stream = mjpeg.NewStream()
	go motion.Test( stream )

	// start http server
	// https://medium.com/better-programming/hands-on-with-jwt-in-golang-8c986d1bb4c0
	// http://localhost:9363/frame.jpeg
	//http.Handle( "/frame.jpeg" , stream )
	//authenticator := auth.NewBasicAuthenticator( "localhost" , Secret )
	//http.HandleFunc( "/frame.jpeg" , authenticator.Wrap( handle ) )
	//log.Fatal( http.ListenAndServe( "0.0.0.0:9363" , nil ) )

	app := fiber.New()
    app.Get("/", handle )
    app.Listen( ":9363" )
}